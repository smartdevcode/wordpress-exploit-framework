# frozen_string_literal: true

require_relative 'spec_helper'

describe Wpxf::GitHubUpdater do
  let(:typhoeus_return_code) { :ok }
  let(:typhoeus_code) { 200 }
  let(:typhoeus_body) { '' }
  let(:typhoeus_headers) { { 'Content-Type' => 'text/html; charset=utf-8' } }
  let(:subject) { Wpxf::GitHubUpdater.new }

  before :each do
    Typhoeus.stub(/.*/) do
      Typhoeus::Response.new(
        code: typhoeus_code,
        body: typhoeus_body,
        headers: typhoeus_headers,
        return_code: typhoeus_return_code
      )
    end
  end

  describe '#get_update' do
    context 'when the API returns a status other than 200' do
      let(:typhoeus_code) { 404 }

      it 'returns nil' do
        expect(subject.get_update('')).to be_nil
      end
    end

    context 'when invalid JSON is returned from the API' do
      let(:typhoeus_body) { 'invalid body' }

      it 'returns nil' do
        expect(subject.get_update('')).to be_nil
      end
    end

    context 'when the version number from GitHub is invalid' do
      let(:typhoeus_body) do
        { tag_name: 'invalid version' }.to_json
      end

      it 'returns nil' do
        expect(subject.get_update('1.0')).to be_nil
      end
    end

    context 'when the current version number is invalid' do
      let(:typhoeus_body) do
        { tag_name: '1.1' }.to_json
      end

      it 'returns nil' do
        expect(subject.get_update('invalid')).to be_nil
      end
    end

    context 'when the current version is the same as the latest GitHub release' do
      let(:typhoeus_body) do
        { tag_name: '1.1' }.to_json
      end

      it 'returns nil' do
        expect(subject.get_update('1.1')).to be_nil
      end
    end

    context 'when the current version is older than the latest GitHub release' do
      let(:typhoeus_body) do
        {
          tag_name: 'v1.1',
          body: 'notes',
          zipball_url: 'url',
          name: 'v1.1'
        }.to_json
      end

      it 'returns a hash containing the information about the latest update' do
        expect(subject.get_update('1.0')).to include(
          release_notes: 'notes',
          zip_url: 'url',
          release_name: 'v1.1'
        )
      end
    end
  end
end
