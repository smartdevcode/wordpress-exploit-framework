require_relative '../spec_helper'

describe Wpxf::Payload do
  let(:subject) { Wpxf::Payload.new }

  describe '#new' do
    it 'registers the encode_payload option' do
      expect(subject.get_option('encode_payload')).to_not be_nil
    end
  end

  describe '#encoded' do
    context 'when the encode_payload option is set to true' do
      it 'returns a base64 copy of the payload wrapped in an eval call' do
        subject.set_option_value('encode_payload', true)
        subject.raw = 'echo "hello world";'
        expect(subject.encoded).to eq(
          '<?php eval(base64_decode(\'ZWNobyAiaGVsbG8gd29ybGQiOw==\')); ?>'
        )
      end
    end

    context 'when the encode_payload option is set to false' do
      it 'returns the raw payload wrapped in php tags' do
        subject.set_option_value('encode_payload', false)
        subject.raw = 'echo "hello world";'
        expect(subject.encoded).to eq '<?php echo "hello world"; ?>'
      end
    end
  end

  describe '#escape_single_quotes' do
    it 'returns the string with single quotes escaped' do
      expect(subject.escape_single_quotes("'test'")).to eq '\\\'test\\\''
    end
  end

  describe '#random_var_name' do
    it 'returns a random variable name' do
      expect(subject.random_var_name).to match(/[a-z]{5,20}/i)
    end
  end

  describe '#generate_vars' do
    it 'generates random variable names for each key specified' do
      res = subject.generate_vars [:a, :b, :c]
      expect(res[:a]).to match(/[a-z]{5,20}/i)
      expect(res[:b]).to match(/[a-z]{5,20}/i)
      expect(res[:c]).to match(/[a-z]{5,20}/i)
    end
  end
end
