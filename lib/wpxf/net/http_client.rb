module Wpxf
  module Net
    # Provides HTTP client functionality.
    module HttpClient
      include Wpxf::Net::UserAgent
      include Wpxf::Net::HttpOptions
      include Wpxf::Net::TyphoeusHelper

      def initialize
        super

        initialize_options
        initialize_advanced_options
      end

      # Initialize the basic HTTP options for the module.
      def initialize_options
        register_options([
          HTTP_OPTION_HOST,
          HTTP_OPTION_PORT,
          HTTP_OPTION_VHOST,
          HTTP_OPTION_PROXY,
          HTTP_OPTION_TARGET_URI
        ])
      end

      # Initialize the advanced HTTP options for the module.
      def initialize_advanced_options
        register_advanced_options([
          HTTP_OPTION_BASIC_AUTH_CREDS,
          HTTP_OPTION_PROXY_AUTH_CREDS,
          HTTP_OPTION_HOST_VERIFICATION,
          HTTP_OPTION_MAX_CONCURRENCY,
          HTTP_OPTION_CLIENT_TIMEOUT,
          HTTP_OPTION_USER_AGENT,
          HTTP_OPTION_FOLLOW_REDIRECT
        ])

        set_option_value('UserAgent', random_user_agent)
      end

      # @return [Hash] the base headers to be used in HTTP requests.
      def base_http_headers
        headers = { 'User-Agent' => datastore['UserAgent'] }

        unless datastore['VHost'].nil? || datastore['VHost'].empty?
          headers['Host'] = datastore['VHost']
        end

        headers
      end

      # Execute a HTTP request.
      # @param method the HTTP method to use (:get, :post, :put or :delete).
      # @param url the URL to request.
      # @param params a hash of the query string parameters. (optional)
      # @param body the body of the request. (optional)
      # @param headers a hash of headers to send with the request. (optional)
      # @return [Hash] a hash containing :code, :body, :headers and :timed_out
      #   keys with values set according to the response from the request.
      def execute_request(method, url, params, body, headers)
        req = create_typhoeus_request(method, url, params, body, headers)
        req.on_complete do |resp|
          return {
            code: resp.code,
            body: resp.body,
            headers: resp.headers,
            timed_out: resp.timed_out?
          }
        end

        req.run
      end

      # Execute a HTTP GET request.
      # @param url the URL to request.
      # @param params a hash of the query string parameters. (optional)
      # @param body the body of the request. (optional)
      # @param headers a hash of headers to send with the request. (optional)
      # @return [Hash] a hash containing :code, :body, :headers and :timed_out
      #   keys with values set according to the response from the request.
      def execute_get_request(url, params = nil, body = nil, headers = {})
        execute_request(:get, url, params, body, headers)
      end

      # Execute a HTTP POST request.
      # @param url the URL to request.
      # @param params a hash of the query string parameters. (optional)
      # @param body the body of the request. (optional)
      # @param headers a hash of headers to send with the request. (optional)
      # @return [Hash] a hash containing :code, :body, :headers and :timed_out
      #   keys with values set according to the response from the request.
      def execute_post_request(url, params = nil, body = nil, headers = {})
        execute_request(:post, url, params, body, headers)
      end

      # Execute a HTTP PUT request.
      # @param url the URL to request.
      # @param params a hash of the query string parameters. (optional)
      # @param body the body of the request. (optional)
      # @param headers a hash of headers to send with the request. (optional)
      # @return [Hash] a hash containing :code, :body, :headers and :timed_out
      #   keys with values set according to the response from the request.
      def execute_put_request(url, params = nil, body = nil, headers = {})
        execute_request(:put, url, params, body, headers)
      end

      # Execute a HTTP DELETE request.
      # @param url the URL to request.
      # @param params a hash of the query string parameters. (optional)
      # @param body the body of the request. (optional)
      # @param headers a hash of headers to send with the request. (optional)
      # @return [Hash] a hash containing :code, :body, :headers and :timed_out
      #   keys with values set according to the response from the request.
      def execute_delete_request(url, params = nil, body = nil, headers = {})
        execute_request(:delete, url, params, body, headers)
      end
    end
  end
end
