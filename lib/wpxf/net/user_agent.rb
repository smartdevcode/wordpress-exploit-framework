module Wpxf
  module Net
    # Provides functionality for generating user agent strings.
    module UserAgent
      # A random browser and OS combination.
      # @return [Hash] a hash containing a :browser and :os
      def random_browser_and_os
        frequencies = clients_by_frequency
        target_frequency = rand(1..100)
        sum = 0

        frequencies.each do |browser_frequency, combinations|
          sum += browser_frequency.to_i
          next if target_frequency > sum

          # This browser encompasses our target frequency, so reset the
          # frequency sum and generate a new target frequency for the
          # operating system selection.
          target_frequency = rand(1..100)
          sum = 0

          # Once we find an OS that covers the target frequency, return
          # the browser/OS combination.
          combinations.each do |os_frequency, combo|
            sum += os_frequency.to_i
            return combo if target_frequency <= sum
          end
        end

        # This point should never be reached, as the frequencies should
        # always total 100 and thus we should always retrieve a combo.
        fail 'Browser and OS frequencies exceeded 100'
      end

      # @return [Hash] a hash of browser and OS combinations grouped by
      #   frequencies drawn from real-world statistics.
      def clients_by_frequency
        {
          34 => {
            89 => {
              browser: :chrome,
              os: :windows
            },
            9 => {
              browser: :chrome,
              os: :osx
            },
            2 => {
              browser: :chrome,
              os: :linux
            }
          },
          32 => {
            100 => {
              browser: :iexplorer,
              os: :windows
            }
          },
          25 => {
            83 => {
              browser: :firefox,
              os: :windows
            },
            16 => {
              browser: :firefox,
              os: :osx
            },
            1 => {
              browser: :firefox,
              os: :linux
            }
          },
          7 => {
            95 => {
              browser: :safari,
              os: :osx
            },
            4 => {
              browser: :safari,
              os: :windows
            },
            1 => {
              browser: :safari,
              os: :linux
            }
          },
          2 => {
            91 => {
              browser: :opera,
              os: :windows
            },
            6 => {
              browser: :opera,
              os: :linux
            },
            3 => {
              browser: :opera,
              os: :osx
            }
          }
        }
      end

      # @return [String] a random NT version string.
      def random_nt_version
        "#{rand(5..6)}.#{rand(0..1)}"
      end

      # @return [String] a random IE version string.
      def random_ie_version
        "#{rand(7..9)}.0"
      end

      # @return [String] a random Trident version string.
      def random_trident_version
        "#{rand(3..5)}.#{rand(0..1)}"
      end

      # @return [String] a random OSX version string.
      def random_osx_version
        "10_#{rand(5..7)}_#{rand(0..9)}"
      end

      # @return [String] a random Chrome version string.
      def random_chrome_version
        "#{rand(13..15)}.0.#{rand(800..899)}.0"
      end

      # @return [String] a random Presto version string.
      def random_presto_version
        "2.9.#{rand(160..190)}"
      end

      # @return [String] a random second part Presto version string.
      def random_presto_version2
        "#{rand(10..12)}.00"
      end

      # A random date between two dates in a specific format.
      # @param min_date the minimum date to return.
      # @param max_date the maximum date to return.
      # @param format the format string to use when formatting the date.
      # @return [String] a formatted random date.
      def random_time_string(min_date, max_date = Time.now, format = '%Y%m%d')
        rand(Time.parse(min_date)..max_date).strftime(format)
      end

      # @return [String] a random Firefox version string.
      def random_firefox_version_string
        [
          "Gecko/#{random_time_string('2011-01-01')} "\
          "Firefox/#{rand(5..7)}.0",
          "Gecko/#{random_time_string('2011-01-01')} "\
          "Firefox/#{rand(5..7)}.0.1",
          "Gecko/#{random_time_string('2010-01-01')} "\
          "Firefox/3.6.#{rand(1..20)}",
          "Gecko/#{random_time_string('2010-01-01')} "\
          'Firefox/3.8'
        ].sample
      end

      # A random CPU type.
      # @param os the operating system that the CPU would be used with.
      # @return [String] a random CPU type.
      def random_processor_string(os)
        return ['i686', 'x86_64'].sample if os == :linux
        return ['Intel', 'PPC', 'U; Intel', 'U; PPC'].sample if os == :osx
      end

      # A random Firefox platform string.
      # @param os the operating system that Firefox would be running on.
      # @return [String] a random Firefox platform string.
      def random_firefox_platform_string(os)
        version = random_firefox_version_string
        cpu = random_processor_string(os)

        if os == :linux
          return "(X11; Linux #{cpu}; rv:#{rand(5..7)}.0) #{version}"
        end

        if os == :osx
          return "(Macintosh; #{cpu} Mac OS X #{random_osx_version} "\
                 "rv:#{rand(2..6)}.0) #{version}"
        end

        if os == :windows
          return "(Windows NT #{random_nt_version}; en-US; rv:1.9."\
                 "#{rand(0..2)}.20) #{version}"
        end
      end
    end
  end
end
