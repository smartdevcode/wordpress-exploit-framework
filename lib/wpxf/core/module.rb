
module Wpxf

  # The base class for all modules.
  class Module

    def initialize
      super

      self.options = []
      self.datastore = {}
    end

    # Unregister an {Option}.
    # @param opt the {Option} to unregister.
    # @return [Void] nothing.
    def unregister_option(opt)
      options.delete_if {|o| o.name.eql?(opt.name)}
    end

    # Register an {Option}.
    # @param opt the {Option} to register.
    # @return [Void] nothing.
    def register_option(opt)
      options.push(opt)
    end

    # Register an array of {Option}.
    # @param opts the array of {Option} to register.
    # @return [Void] nothing.
    def register_options(opts)
      opts.each do |opt|
        unregister_option(opt)
        register_option(opt)
      end
    end

    # Register an array of advanced {Option}.
    # @param opts the array of {Option} to register.
    # @return [Void] nothing.
    def register_advanced_options(opts)
      opts.each do |opt|
        opt.advanced = true
      end

      register_options(opts)
    end

    # Register an array of evasion {Option}.
    # @param opts the array of {Option} to register.
    # @return [Void] nothing.
    def register_evasion_options(opts)
      opts.each do |opt|
        opt.evasion = true
      end

      register_options(opts)
    end

    # Find and return an {Option} by its registered name.
    # @param name the name of the {Option}.
    # @return [Option, nil] the matching option or nil if not found.
    def get_option(name)
      options.find {|o| o.name.eql?(name)}
    end

    # Set the value of a module option.
    # @param name the name of the option to set.
    # @param value the value to use.
    # @return [String, Symbol] the normalized value, :invalid if the
    #   specified value is invalid or :not_found if the name is invalid.
    def set_option_value(name, value)
      opt = get_option(name)
      return :not_found unless opt

      if opt.valid?(value)
        datastore[name] = value
        return opt.normalize(value)
      else
        return :invalid
      end
    end

    # Run the module
    # @return [Void] nothing
    def run
    end

    # @return [Array] an array of {Option} objects used to configure the current module.
    attr_accessor :options

    # @return [Hash] a hash containing the option values specified by the user.
    attr_accessor :datastore
  end

end
