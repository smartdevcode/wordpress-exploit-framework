module Wpxf
  # The base class for all modules.
  class Module
    include Wpxf::ModuleInfo
    include Wpxf::OutputEmitters
    include Wpxf::Options
    include Wpxf::WordPress::Fingerprint
    include Wpxf::WordPress::Options
    include Wpxf::WordPress::Urls

    def initialize
      super

      register_option(
        BooleanOption.new(
          name: 'verbose',
          desc: 'Enable verbose output',
          required: true,
          default: false
        )
      )

      self.event_emitter = EventEmitter.new
    end

    # @return [Boolean] true if all the required options are set.
    def can_execute?
      all_options_valid? && (
        aux_module? || (payload && payload.all_options_valid?)
      )
    end

    # @return [Boolean] true if the target is running WordPress.
    def check_wordpress_and_online
      unless wordpress_and_online?
        emit_error "#{full_uri} does not appear to be running WordPress"
        return false
      end

      true
    end

    # @return [Array] an array of missing option names that are required.
    def missing_options
      opts = super
      opts.push('payload') if exploit_module? && !payload

      if payload
        payload_opts = payload.missing_options
        opts.push(payload_opts) unless payload_opts.empty?
      end

      opts
    end

    # Set the value of a module option.
    # @param name the name of the option to set.
    # @param value the value to use.
    # @return [String, Symbol] the normalized value, :invalid if the
    #   specified value is invalid or :not_found if the name is invalid.
    def set_option_value(name, value)
      res = super(name, value)

      if payload
        if res == :not_found
          return payload.set_option_value(name, value)
        elsif res != :invalid
          res = payload.set_option_value(name, value)
        end
      end

      res
    end

    # Unset an option or reset it back to its default value.
    # @param name [String] the name of the option to unset.
    def unset_option(name)
      super(name)
      payload.unset_option(name) if payload
    end

    # Authenticate with WordPress and return the cookie.
    # @param username [String] the username to authenticate with.
    # @param password [String] the password to authenticate with.
    # @return [CookieJar, Boolean] the cookie in a CookieJar if successful,
    #   otherwise, returns false.
    def authenticate_with_wordpress(username, password)
      emit_info "Authenticating with WordPress using #{username}:#{password}..."
      cookie = wordpress_login(username, password)
      if cookie.nil?
        emit_error 'Failed to authenticate with WordPress'
        return false
      else
        emit_success 'Authenticated with WordPress', true
        return cookie
      end
    end

    # Run the module.
    # @return [Boolean] true if successful.
    def run
      true
    end

    # Check if the target is vulnerable.
    # @return [Symbol] :unknown, :vulnerable or :safe.
    def check
      :unknown
    end

    # @return [Boolean] true if the module is an auxiliary module.
    def aux_module?
      to_s.split('::')[-2].eql? 'Auxiliary'
    end

    # @return [Boolean] true if the module is an exploit module.
    def exploit_module?
      to_s.split('::')[-2].eql? 'Exploit'
    end

    # @return [Payload] the {Payload} to use with the current module.
    attr_accessor :payload

    # @return [EventEmitter] the {EventEmitter} for the module's events.
    attr_accessor :event_emitter
  end
end
