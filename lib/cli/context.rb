module Cli
  # A context which modules will be used in.
  class Context
    def initialize
    end

    def class_name(path_name)
      return path_name if path_name !~ /_/ && path_name =~ /[A-Z]+.*/
      path_name.split('_').map(&:capitalize).join
    end

    def load_module(path)
      match = path.match(/(auxiliary|exploit)\/(.+)/i)
      fail 'Invalid module path' unless match

      type = match.captures[0]
      name = class_name(match.captures[1])

      begin
        if type.eql? 'auxiliary'
          @module = Wpxf::Auxiliary.const_get(name).new
        elsif type.eql? 'exploit'
          @module = Wpxf::Exploit.const_get(name).new
        end
      rescue NameError
        raise 'Invalid module name'
      end

      @module_path = path
      @module
    end

    attr_reader :module_path
    attr_reader :module
  end
end
