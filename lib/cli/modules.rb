module Cli
  # Methods for handling commands that interact with modules.
  module Modules
    def use(module_path)
      context = Context.new
      begin
        mod = context.load_module(module_path)
        print_good "Loaded module: #{mod}"
        @context_stack.push(context)
      rescue StandardError => e
        print_bad "Failed to load module: #{e}"
      end
    end

    def set(name, value)
      unless context
        print_bad 'No module loaded yet'
        return
      end

      res = context.module.set_option_value(name, value)
      if res == :not_found
        print_warning "\"#{name}\" is not a valid option"
      elsif res == :invalid
        print_bad "\"#{value}\" is not a valid value"
      else
        print_good "Set #{name} => #{res}"
      end
    end
  end
end
