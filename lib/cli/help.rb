module Cli
  # Methods for handling commands that provide the user with help info.
  module Help
    def show_options
      mod = context.module
      print_std 'Module options:'
      puts ''
      indent_cursor do
        print_options_table(mod, module_options(false))
      end

      if mod.payload
        puts ''
        print_std 'Payload options:'
        puts ''
        indent_cursor do
          print_options_table(mod.payload, mod.payload.options)
        end
      end
    end

    def print_options_table(parent, opts)
      data = empty_option_table_data
      opts.each do |opt|
        data.push(option_table_row(parent, opt))
      end

      print_table(data)
    end

    def show_advanced_options
      opts = module_options(true)
      opts.each do |opt|
        print_std "Name: #{opt.name}"
        print_std 'Current setting: '\
                  "#{context.module.normalized_option_value(opt.name)}"
        print_std "Required: #{opt.required?}"
        print_std "Description: #{opt.desc}"
        puts ''
      end
    end

    def show(target)
      if target.eql?('options')
        show_options
      elsif target.eql?('advanced')
        show_advanced_options
      else
        print_bad("\"#{target}\" is not a valid argument")
      end
    end

    private

    def module_options(advanced)
      if context
        opts = context.module.options.select { |o| o.advanced? == advanced }
        return opts.sort_by(&:name)
      else
        return []
      end
    end

    def empty_option_table_data
      [{
        name: 'Name',
        value: 'Current Setting',
        req: 'Required',
        desc: 'Description'
      }]
    end

    def option_table_row(parent, opt)
      {
        name: opt.name,
        value: parent.normalized_option_value(opt.name),
        req: opt.required?,
        desc: opt.desc
      }
    end
  end
end
