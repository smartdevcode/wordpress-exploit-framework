# frozen_string_literal: true

require 'open3'

# Provides common functionality for generating payloads using msfvenom.
module Wpxf::Payloads::MsfVenomHelper
  include Wpxf
  include Wpxf::Options

  def register_msfvenom_options
    register_options([
      StringOption.new(
        name: 'msfvenom',
        required: true,
        default: 'msfvenom',
        desc: 'The path to the msfvenom executable'
      )
    ])
  end

  def msfvenom
    normalized_option_value('msfvenom')
  end

  def msfvenom_payload
    @meterpreter_payload
  end

  def generate_msfvenom_payload(mod, payload_name, *args)
    mod.emit_info 'Generating payload...'
    begin
      stdout, stderr = Open3.capture3(msfvenom, '-p', payload_name, *args)
    rescue Errno::ENOENT => e
      mod.emit_error e.to_s, true
      mod.emit_error 'msfvenom not found - check the msfvenom payload option'
      return false
    end

    if stdout.empty?
      mod.emit_error 'Failed to generate the payload'

      if stderr.to_s.match?(/Bundler::GemNotFound/)
        mod.emit_error 'WPXF and Metasploit are using different Ruby gemsets'
        mod.emit_error 'If both packages are up to date, please report this via GitHub'
      else
        mod.emit_error stderr
      end

      return false
    end

    @meterpreter_payload = stdout
    true
  end
end
